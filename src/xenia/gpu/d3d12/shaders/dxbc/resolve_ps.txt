//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeResolveConstants
// {
//
//   uint2 xe_resolve_rect_samples;     // Offset:    0 Size:     8
//   uint xe_resolve_source_size;       // Offset:    8 Size:     4
//   uint xe_resolve_info;              // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_resolve_sampler                sampler      NA          NA      S0             s0      1 
// xe_resolve_source                 texture  float4          2d      T0             t0      1 
// XeResolveConstants                cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][1], immediateIndexed, space=0
dcl_sampler S0[0:0], mode_default, space=0
dcl_resource_texture2d (float,float,float,float) T0[0:0], space=0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 2
ushr r0.xyzw, CB0[0][0].wxyz, l(1, 16, 16, 16)
mov r1.xw, r0.xxxw
mov r1.yz, CB0[0][0].wwzw
and r1.xyzw, r1.xyzw, l(1, 1, 0x0000ffff, 0x0000ffff)
iadd r0.xw, r1.xxxy, l(1, 0, 0, 1)
utof r0.xyzw, r0.xyzw
mul r0.xw, r0.xxxw, v0.xxxy
ubfe r1.xy, l(2, 2, 0, 0), l(4, 2, 0, 0), CB0[0][0].wwww
utof r1.xy, r1.xyxx
mad r0.xw, r1.xxxy, l(0.500000, 0.000000, 0.000000, 0.500000), r0.xxxw
add r0.xw, r0.xxxw, l(-0.500000, 0.000000, 0.000000, -0.500000)
add r0.yz, r0.yyzy, l(0.000000, -0.500000, -0.500000, 0.000000)
max r0.xw, r0.xxxw, l(0.500000, 0.000000, 0.000000, 0.500000)
min r0.xy, r0.yzyy, r0.xwxx
and r0.zw, CB0[0][0].xxxy, l(0, 0, 0x0000ffff, 0x0000ffff)
utof r0.zw, r0.zzzw
add r0.xy, r0.zwzz, r0.xyxx
utof r0.zw, r1.zzzw
div r0.xy, r0.xyxx, r0.zwzz
sample_l r0.xyzw, r0.xyxx, T0[0].xyzw, S0[0], l(0.000000)
ibfe r1.x, l(6), l(6), CB0[0][0].w
itof r1.x, r1.x
exp r1.x, r1.x
mul o0.xyzw, r0.xyzw, r1.xxxx
ret 
// Approximately 25 instruction slots used
